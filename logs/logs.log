2020-10-30 15:40:13,107 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 15:40:13,155 -INFO - mservice.aggregate_operation.longest_album_q7- longest_album_q7.py - get_longest_album - Performing Read Operation
2020-10-30 15:40:13,155 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 15:40:13,155 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:40:13,171 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 15:40:13,171 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:40:13,171 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 15:40:13,171 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:40:13,171 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 15:40:13,171 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:40:13,202 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 15:40:13,202 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:40:13,202 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 15:40:13,202 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:40:13,202 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 15:40:13,202 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:40:13,202 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 15:40:13,218 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT track.`AlbumId` AS `track_AlbumId`, album.`Title` AS `album_Title`, sum(track.`Milliseconds`) AS total_playtime 
FROM track INNER JOIN album ON track.`AlbumId` = album.`AlbumId` GROUP BY track.`AlbumId` ORDER BY total_playtime DESC, track.`AlbumId` 
 LIMIT %(param_1)s
2020-10-30 15:40:13,218 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'param_1': 20}
2020-10-30 15:40:13,452 -INFO - mservice.aggregate_operation.longest_album_q7- longest_album_q7.py - get_longest_album - 

The 20 Longest Albums Based On Playtime Of Its Tracks
2020-10-30 15:40:13,468 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 15:42:14,094 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 15:42:14,141 -INFO - mservice.aggregate_operation.longest_album_q7- longest_album_q7.py - get_longest_album - Performing Read Operation
2020-10-30 15:42:14,157 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 15:42:14,157 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:42:14,157 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 15:42:14,157 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:42:14,157 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 15:42:14,157 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:42:14,157 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 15:42:14,157 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:42:14,251 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 15:42:14,251 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:42:14,251 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 15:42:14,251 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:42:14,251 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 15:42:14,251 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 15:42:14,251 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 15:42:14,251 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT track.`AlbumId` AS `track_AlbumId`, album.`Title` AS `album_Title`, sum(track.`Milliseconds`) AS total_playtime 
FROM track INNER JOIN album ON track.`AlbumId` = album.`AlbumId` GROUP BY track.`AlbumId` ORDER BY total_playtime DESC, track.`AlbumId` 
 LIMIT %(param_1)s
2020-10-30 15:42:14,251 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'param_1': 20}
2020-10-30 15:42:14,251 -INFO - mservice.aggregate_operation.longest_album_q7- longest_album_q7.py - get_longest_album - 

The 20 Longest Albums Based On Playtime Of Its Tracks
2020-10-30 15:42:14,266 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:04:40,463 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:04:40,549 -INFO - mservice.read_operation.read_records- read_records.py - perform_read_join - Performing Read Operation
2020-10-30 16:04:40,561 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:04:40,562 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:04:40,565 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:04:40,565 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:04:40,568 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:04:40,568 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:04:40,569 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:04:40,569 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:04:40,571 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:04:40,571 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:04:40,572 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:04:40,572 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:04:40,573 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:04:40,573 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:04:40,574 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:04:40,576 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT invoice.`InvoiceId` AS `invoice_InvoiceId`, invoice.`CustomerId` AS `invoice_CustomerId`, invoice.`InvoiceDate` AS `invoice_InvoiceDate`, invoice.`Total` AS `invoice_Total`, customer.`FirstName` AS `customer_FirstName`, employee.`FirstName` AS `Employee_Name`, employee.`Title` AS `employee_Title`, track.`Name` AS `track_Name` 
FROM invoice INNER JOIN customer ON invoice.`CustomerId` = customer.`CustomerId` INNER JOIN invoiceline ON invoice.`InvoiceId` = invoiceline.`InvoiceId` INNER JOIN employee ON customer.`SupportRepId` = employee.`EmployeeId` INNER JOIN track ON invoiceline.`TrackId` = track.`TrackId` ORDER BY invoice.`InvoiceId` 
 LIMIT %(param_1)s
2020-10-30 16:04:40,576 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'param_1': 20}
2020-10-30 16:04:40,728 -INFO - mservice.read_operation.read_records- read_records.py - perform_read_join - 

The 20 Invoice Records Are
2020-10-30 16:04:40,744 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:10:18,471 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:10:18,521 -INFO - mservice.aggregate_operation.top_album_tracks_q1- top_album_tracks_q1.py - get_top_album_tracks - Performing Read Operation
2020-10-30 16:10:18,531 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:10:18,531 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:10:18,535 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:10:18,535 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:10:18,538 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:10:18,538 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:10:18,539 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:10:18,539 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:10:18,541 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:10:18,542 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:10:18,542 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:10:18,542 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:10:18,543 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:10:18,543 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:10:18,544 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:10:18,545 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT track.`AlbumId` AS `track_AlbumId`, album.`Title` AS `album_Title`, count(track.`TrackId`) AS number_of_tracks 
FROM track INNER JOIN album ON track.`AlbumId` = album.`AlbumId` GROUP BY track.`AlbumId` ORDER BY number_of_tracks DESC, track.`AlbumId` 
 LIMIT %(param_1)s
2020-10-30 16:10:18,545 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'param_1': 20}
2020-10-30 16:10:18,590 -INFO - mservice.aggregate_operation.top_album_tracks_q1- top_album_tracks_q1.py - get_top_album_tracks - 

The Top 20 Albums based on number of tracks are
2020-10-30 16:10:18,595 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:11:37,709 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:11:37,759 -INFO - mservice.aggregate_operation.top_artist_tracks_q2- top_artist_tracks_q2.py - get_top_artist_tracks - Performing Read Operation
2020-10-30 16:11:37,769 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:11:37,769 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:11:37,773 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:11:37,774 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:11:37,777 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:11:37,777 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:11:37,778 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:11:37,778 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:11:37,780 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:11:37,780 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:11:37,781 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:11:37,781 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:11:37,781 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:11:37,781 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:11:37,783 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:11:37,784 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT album.`ArtistId` AS `album_ArtistId`, artist.`Name` AS `artist_Name`, count(track.`TrackId`) AS number_of_tracks 
FROM track INNER JOIN album ON track.`AlbumId` = album.`AlbumId` INNER JOIN artist ON album.`ArtistId` = artist.`ArtistId` GROUP BY album.`ArtistId` ORDER BY number_of_tracks DESC, album.`ArtistId` 
 LIMIT %(param_1)s
2020-10-30 16:11:37,784 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'param_1': 20}
2020-10-30 16:11:37,817 -INFO - mservice.aggregate_operation.top_artist_tracks_q2- top_artist_tracks_q2.py - get_top_artist_tracks - 

The Top 20 Artist based on number of tracks are
2020-10-30 16:11:37,818 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:12:44,907 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:12:44,954 -INFO - mservice.aggregate_operation.top_customer_amount_q3- top_customer_amount_q3.py - get_top_customers - Performing Read Operation
2020-10-30 16:12:44,969 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:12:44,969 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:12:44,969 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:12:44,969 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:12:44,969 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:12:44,969 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:12:44,969 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:12:44,969 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:12:44,985 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:12:44,985 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:12:44,985 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:12:44,985 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:12:44,985 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:12:44,985 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:12:44,985 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:12:44,985 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT invoice.`CustomerId` AS `invoice_CustomerId`, concat(customer.`FirstName`, %(concat_1)s, customer.`LastName`) AS name, sum(invoice.`Total`) AS total_amount 
FROM invoice INNER JOIN customer ON invoice.`CustomerId` = customer.`CustomerId` GROUP BY invoice.`CustomerId` ORDER BY total_amount DESC, invoice.`CustomerId` 
 LIMIT %(param_1)s
2020-10-30 16:12:44,985 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'concat_1': ' ', 'param_1': 20}
2020-10-30 16:12:45,032 -INFO - mservice.aggregate_operation.top_customer_amount_q3- top_customer_amount_q3.py - get_top_customers - 

The Top 20 Customers based on Total Amount of Purchases
2020-10-30 16:12:45,063 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:14:05,138 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:14:05,187 -INFO - mservice.aggregate_operation.top_album_purchases_q4- top_album_purchases_q4.py - get_top_album_purchases - Performing Read Operation
2020-10-30 16:14:05,197 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:14:05,197 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:14:05,201 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:14:05,201 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:14:05,204 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:14:05,204 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:14:05,205 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:14:05,205 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:14:05,207 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:14:05,207 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:14:05,208 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:14:05,208 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:14:05,208 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:14:05,208 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:14:05,209 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:14:05,211 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT track.`AlbumId` AS `track_AlbumId`, album.`Title` AS `album_Title`, count(DISTINCT invoiceline.`InvoiceId`) AS number_of_purchases 
FROM invoiceline INNER JOIN track ON invoiceline.`TrackId` = track.`TrackId` INNER JOIN album ON track.`AlbumId` = album.`AlbumId` GROUP BY track.`AlbumId` ORDER BY number_of_purchases DESC, track.`AlbumId` 
 LIMIT %(param_1)s
2020-10-30 16:14:05,211 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'param_1': 20}
2020-10-30 16:14:05,291 -INFO - mservice.aggregate_operation.top_album_purchases_q4- top_album_purchases_q4.py - get_top_album_purchases - 

The Top 20 Albums based on Total Number of Purchases
2020-10-30 16:14:05,293 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:15:15,417 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:15:15,463 -INFO - mservice.aggregate_operation.top_tracks_for_genre_q5- top_tracks_for_genre_q5.py - get_top_tracks_for_genre - Performing Read Operation
2020-10-30 16:15:15,463 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:15:15,463 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT anon_1.track_id AS anon_1_track_id, anon_1.track_name AS anon_1_track_name, anon_1.genre_id AS anon_1_genre_id, anon_1.genre_name AS anon_1_genre_name, anon_1.number_of_purchases AS anon_1_number_of_purchases 
FROM (SELECT track.`TrackId` AS track_id, track.`Name` AS track_name, track.`GenreId` AS genre_id, genre.`Name` AS genre_name, count(invoiceline.`InvoiceId`) AS number_of_purchases, row_number() OVER (PARTITION BY track.`GenreId` ORDER BY count(invoiceline.`InvoiceId`) DESC) AS track_rank 
FROM track INNER JOIN invoiceline ON track.`TrackId` = invoiceline.`TrackId` INNER JOIN genre ON track.`GenreId` = genre.`GenreId` GROUP BY track.`TrackId`) AS anon_1 
WHERE anon_1.track_rank < %(track_rank_1)s
2020-10-30 16:15:15,479 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'track_rank_1': 3}
2020-10-30 16:15:15,655 -INFO - mservice.aggregate_operation.top_tracks_for_genre_q5- top_tracks_for_genre_q5.py - get_top_tracks_for_genre - 

The Top 2 Tracks For all Genre, Based On Number Of Purchases
2020-10-30 16:15:15,671 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:16:30,076 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:16:30,124 -INFO - mservice.aggregate_operation.longest_tracks_q6- longest_tracks_q6.py - get_longest_tracks - Performing Read Operation
2020-10-30 16:16:30,133 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:16:30,134 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:16:30,137 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:16:30,137 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:16:30,141 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:16:30,141 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:16:30,141 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:16:30,142 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:16:30,143 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:16:30,143 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:16:30,144 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:16:30,144 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:16:30,145 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:16:30,145 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:16:30,146 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:16:30,147 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT track.`TrackId` AS `track_TrackId`, track.`Name` AS `track_Name`, track.`Milliseconds` AS `track_Milliseconds` 
FROM track ORDER BY track.`Milliseconds` DESC, track.`TrackId` 
 LIMIT %(param_1)s
2020-10-30 16:16:30,147 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'param_1': 20}
2020-10-30 16:16:30,150 -INFO - mservice.aggregate_operation.longest_tracks_q6- longest_tracks_q6.py - get_longest_tracks - 

The Top 20 Tracks, Based On It's Playtime
2020-10-30 16:16:30,151 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:17:34,506 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:17:34,556 -INFO - mservice.aggregate_operation.longest_album_q7- longest_album_q7.py - get_longest_album - Performing Read Operation
2020-10-30 16:17:34,566 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:17:34,566 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:17:34,570 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:17:34,570 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:17:34,574 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:17:34,574 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:17:34,575 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:17:34,575 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:17:34,577 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:17:34,577 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:17:34,577 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:17:34,578 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:17:34,578 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:17:34,578 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:17:34,579 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:17:34,580 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT track.`AlbumId` AS `track_AlbumId`, album.`Title` AS `album_Title`, sum(track.`Milliseconds`) AS total_playtime 
FROM track INNER JOIN album ON track.`AlbumId` = album.`AlbumId` GROUP BY track.`AlbumId` ORDER BY total_playtime DESC, track.`AlbumId` 
 LIMIT %(param_1)s
2020-10-30 16:17:34,581 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'param_1': 20}
2020-10-30 16:17:34,589 -INFO - mservice.aggregate_operation.longest_album_q7- longest_album_q7.py - get_longest_album - 

The 20 Longest Albums Based On Playtime Of Its Tracks
2020-10-30 16:17:34,595 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:18:57,090 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:18:57,147 -INFO - mservice.aggregate_operation.number_of_playlist_tracks_q8- number_of_playlist_tracks_q8.py - get_number_of_playlist_tracks - Performing Read Operation
2020-10-30 16:18:57,157 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:18:57,158 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:18:57,161 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:18:57,161 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:18:57,164 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:18:57,164 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:18:57,164 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:18:57,164 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:18:57,164 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:18:57,164 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:18:57,164 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:18:57,164 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:18:57,164 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:18:57,164 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:18:57,164 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:18:57,164 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT playlisttrack.`TrackId` AS `playlisttrack_TrackId`, track.`Name` AS `track_Name`, count(playlisttrack.`PlaylistId`) AS number_of_playlist 
FROM playlisttrack INNER JOIN track ON playlisttrack.`TrackId` = track.`TrackId` GROUP BY playlisttrack.`TrackId` ORDER BY number_of_playlist DESC, playlisttrack.`TrackId` 
 LIMIT %(param_1)s
2020-10-30 16:18:57,164 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'param_1': 20}
2020-10-30 16:18:57,320 -INFO - mservice.aggregate_operation.number_of_playlist_tracks_q8- number_of_playlist_tracks_q8.py - get_number_of_playlist_tracks - 

The Top 20 Tracks, Based On Number Of Playlist It Is Added To
2020-10-30 16:18:57,335 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:20:09,682 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:20:09,729 -INFO - mservice.aggregate_operation.number_of_playlist_album_q9- number_of_playlist_album_q9.py - get_number_of_playlist_album - Performing Read Operation
2020-10-30 16:20:09,729 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:20:09,729 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:20:09,748 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:20:09,749 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:20:09,755 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:20:09,756 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:20:09,756 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:20:09,756 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:20:09,758 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:20:09,758 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:20:09,759 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:20:09,759 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:20:09,760 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:20:09,760 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:20:09,761 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:20:09,762 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT track.`AlbumId` AS `track_AlbumId`, album.`Title` AS `album_Title`, count(DISTINCT playlisttrack.`PlaylistId`) AS number_of_playlist 
FROM playlisttrack INNER JOIN track ON playlisttrack.`TrackId` = track.`TrackId` INNER JOIN album ON track.`AlbumId` = album.`AlbumId` GROUP BY track.`AlbumId` ORDER BY number_of_playlist DESC, track.`AlbumId` 
 LIMIT %(param_1)s
2020-10-30 16:20:09,762 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'param_1': 20}
2020-10-30 16:20:09,808 -INFO - mservice.aggregate_operation.number_of_playlist_album_q9- number_of_playlist_album_q9.py - get_number_of_playlist_album - 

The Top 20 Albums, Based On Number Of Playlist It Is Added To
2020-10-30 16:20:09,824 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:21:24,397 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:21:24,450 -INFO - mservice.aggregate_operation.tracks_with_more_genre_q10- tracks_with_more_genre_q10.py - get_tracks_with_more_genre - Performing Read Operation
2020-10-30 16:21:24,461 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:21:24,461 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:21:24,464 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:21:24,465 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:21:24,468 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:21:24,468 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:21:24,469 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:21:24,469 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:21:24,471 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:21:24,472 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:21:24,472 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:21:24,472 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:21:24,473 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:21:24,473 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:21:24,474 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:21:24,475 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DISTINCT track.`Name` AS track_name, genre.`Name` AS genre_name 
FROM track INNER JOIN genre ON track.`GenreId` = genre.`GenreId` 
WHERE track.`Name` IN (SELECT track.`Name` 
FROM track GROUP BY track.`Name` 
HAVING count(DISTINCT track.`GenreId`) > %(count_1)s) ORDER BY track.`Name` 
 LIMIT %(param_1)s
2020-10-30 16:21:24,475 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'count_1': 1, 'param_1': 21}
2020-10-30 16:21:24,503 -INFO - mservice.aggregate_operation.tracks_with_more_genre_q10- tracks_with_more_genre_q10.py - get_tracks_with_more_genre - 

21 Tracks, That Are Part Of More Than One Genre
2020-10-30 16:21:24,504 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:22:30,788 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:22:30,835 -INFO - mservice.aggregate_operation.add_genre_to_album_q11- add_genre_to_album_q11.py - add_genre_to_album - Performing Read Operation
2020-10-30 16:22:30,835 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:22:30,835 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - DESCRIBE `
                        SELECT DISTINCT
                            a.title AS album,
                            g.Name AS genre	  
                        FROM track t
                        INNER JOIN album a
                            ON t.AlbumId = a.AlbumId
                        INNER JOIN genre g
                            ON t.GenreId = g.GenreId
                        -- WHERE t.AlbumId = 102 OR t.AlbumId = 251 
                        ORDER BY t.AlbumId
                        LIMIT 20
                    `
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:22:30,850 -INFO - sqlalchemy.engine.base.Engine- log.py - info - 
                        SELECT DISTINCT
                            a.title AS album,
                            g.Name AS genre	  
                        FROM track t
                        INNER JOIN album a
                            ON t.AlbumId = a.AlbumId
                        INNER JOIN genre g
                            ON t.GenreId = g.GenreId
                        -- WHERE t.AlbumId = 102 OR t.AlbumId = 251 
                        ORDER BY t.AlbumId
                        LIMIT 20
                    
2020-10-30 16:22:30,866 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:23:33,035 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:23:33,098 -INFO - mservice.aggregate_operation.add_genre_to_artist_q12- add_genre_to_artist_q12.py - add_genre_to_artist - Performing Read Operation
2020-10-30 16:23:33,098 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:23:33,098 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:23:33,098 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:23:33,098 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - DESCRIBE `
                        SELECT DISTINCT 
                            art.Name AS artist ,
                            g.Name AS genre	   
                        FROM track t
                        INNER JOIN genre g
                            ON t.GenreId = g.GenreId
                        INNER JOIN album a
                            ON t.AlbumId = a.AlbumId
                        INNER JOIN artist art
                            ON a.ArtistId = art.ArtistId
                        -- WHERE a.ArtistId = 6 
                        ORDER BY a.ArtistId
                        LIMIT 20
                    `
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:23:33,113 -INFO - sqlalchemy.engine.base.Engine- log.py - info - 
                        SELECT DISTINCT 
                            art.Name AS artist ,
                            g.Name AS genre	   
                        FROM track t
                        INNER JOIN genre g
                            ON t.GenreId = g.GenreId
                        INNER JOIN album a
                            ON t.AlbumId = a.AlbumId
                        INNER JOIN artist art
                            ON a.ArtistId = art.ArtistId
                        -- WHERE a.ArtistId = 6 
                        ORDER BY a.ArtistId
                        LIMIT 20
                    
2020-10-30 16:23:33,129 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:24:36,836 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:24:36,887 -INFO - mservice.aggregate_operation.top_artist_distinct_genre_q13- top_artist_distinct_genre_q13.py - get_top_artist_genre - Performing Read Operation
2020-10-30 16:24:36,897 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:24:36,897 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT album.`ArtistId` AS `album_ArtistId`, artist.`Name` AS `artist_Name`, count(DISTINCT track.`GenreId`) AS number_of_genre 
FROM track INNER JOIN album ON track.`AlbumId` = album.`AlbumId` INNER JOIN artist ON album.`ArtistId` = artist.`ArtistId` GROUP BY album.`ArtistId` ORDER BY number_of_genre DESC, album.`ArtistId` 
 LIMIT %(param_1)s
2020-10-30 16:24:36,900 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'param_1': 20}
2020-10-30 16:24:36,916 -INFO - mservice.aggregate_operation.top_artist_distinct_genre_q13- top_artist_distinct_genre_q13.py - get_top_artist_genre - 

The top 20 Artist, Based On Number Of Distinct Genre
2020-10-30 16:24:36,916 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:25:29,712 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:25:29,761 -INFO - mservice.aggregate_operation.top_employee_month_q14- top_employee_month_q14.py - get_top_employee_sales - Performing Read Operation
2020-10-30 16:25:29,771 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:25:29,772 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:25:29,775 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:25:29,776 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:25:29,779 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:25:29,779 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:25:29,780 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:25:29,780 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:25:29,782 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:25:29,782 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:25:29,783 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:25:29,783 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:25:29,783 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:25:29,784 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:25:29,785 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:25:29,786 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT customer.`SupportRepId` AS employee_id, concat(employee.`FirstName`, %(concat_1)s, employee.`LastName`) AS name, count(invoice.`InvoiceId`) AS total_sales 
FROM invoice INNER JOIN customer ON invoice.`CustomerId` = customer.`CustomerId` INNER JOIN employee ON customer.`SupportRepId` = employee.`EmployeeId` 
WHERE EXTRACT(month FROM invoice.`InvoiceDate`) = %(param_1)s AND EXTRACT(year FROM invoice.`InvoiceDate`) = %(param_2)s GROUP BY customer.`SupportRepId` ORDER BY total_sales DESC, customer.`SupportRepId` 
 LIMIT %(param_3)s
2020-10-30 16:25:29,787 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'concat_1': ' ', 'param_1': 8, 'param_2': 2012, 'param_3': 4}
2020-10-30 16:25:29,823 -INFO - mservice.aggregate_operation.top_employee_month_q14- top_employee_month_q14.py - get_top_employee_sales - 

The Top 4 Employee with Most Sales in Year: 2012 and Month: 08
2020-10-30 16:25:29,824 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
2020-10-30 16:26:23,287 -INFO - mservice.utils.logger- logger.py - configure_logging - Configured Logging
2020-10-30 16:26:23,334 -INFO - mservice.aggregate_operation.top_manager_month_q15- top_manager_month_q15.py - get_top_manager_revenue - Performing Read Operation
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'sql_mode'
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SHOW VARIABLES LIKE 'lower_case_table_names'
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT DATABASE()
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {}
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - BEGIN (implicit)
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - SELECT employee_1.`ReportsTo` AS manager_id, concat(employee_2.`FirstName`, %(concat_1)s, employee_2.`LastName`) AS manager_name, sum(invoice.`Total`) AS total_revenue 
FROM invoice INNER JOIN customer ON invoice.`CustomerId` = customer.`CustomerId` INNER JOIN employee AS employee_1 ON customer.`SupportRepId` = employee_1.`EmployeeId` INNER JOIN employee AS employee_2 ON employee_1.`ReportsTo` = employee_2.`EmployeeId` 
WHERE EXTRACT(month FROM invoice.`InvoiceDate`) = %(param_1)s AND EXTRACT(year FROM invoice.`InvoiceDate`) = %(param_2)s GROUP BY manager_id ORDER BY total_revenue DESC 
 LIMIT %(param_3)s
2020-10-30 16:26:23,380 -INFO - sqlalchemy.engine.base.Engine- log.py - info - {'concat_1': ' ', 'param_1': 8, 'param_2': 2012, 'param_3': 2}
2020-10-30 16:26:23,398 -INFO - mservice.aggregate_operation.top_manager_month_q15- top_manager_month_q15.py - get_top_manager_revenue - 

The Top 2 Manager with Most Sales in Year: 2012 and Month: 08
2020-10-30 16:26:23,399 -INFO - sqlalchemy.engine.base.Engine- log.py - info - ROLLBACK
